"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var Expansion_1 = __importDefault(require("./Expansion"));
var alternative_pattern_1 = require("./expanders/alternative-pattern");
var char_pattern_1 = require("./expanders/char-pattern");
var character_class_pattern_1 = require("./expanders/character-class-pattern");
var disjunction_pattern_1 = require("./expanders/disjunction-pattern");
var group_pattern_1 = require("./expanders/group-pattern");
var repetition_pattern_1 = require("./expanders/repetition-pattern");
var Guards = __importStar(require("./types/regexp-tree-guards"));
/* istanbul ignore next */
function assertNever(x) {
    throw new Error("Unexpected node type: " + x);
}
var Expander = /** @class */ (function () {
    /**
     * Create a generator for strings that match regular expression
     * patterns parsed by regexp-tree.
     * @param flags The regular expression modifier flags
     */
    function Expander(flags) {
        this.expandAlternative = alternative_pattern_1.expandAlternative;
        this.expandBackreference = group_pattern_1.expandBackreference;
        this.expandChar = char_pattern_1.expandChar;
        this.expandCharacterClass = character_class_pattern_1.expandCharacterClass;
        this.expandDisjunction = disjunction_pattern_1.expandDisjunction;
        this.expandGroup = group_pattern_1.expandGroup;
        this.expandRepetition = repetition_pattern_1.expandRepetition;
        this.flags = flags;
    }
    /**
     * Identify and expand an expression of any type.
     * @param expression The expression to expand
     * @returns The Expansion of pattern
     */
    Expander.prototype.expandExpression = function (expression) {
        if (expression === null) {
            return Expansion_1["default"].Blank;
        }
        else if (Guards.isAlternative(expression)) {
            return this.expandAlternative(expression);
        }
        else if (Guards.isAssertion(expression)) {
            return Expansion_1["default"].Blank;
        }
        else if (Guards.isBackreference(expression)) {
            return this.expandBackreference(expression);
        }
        else if (Guards.isChar(expression)) {
            return this.expandChar(expression);
        }
        else if (Guards.isCharacterClass(expression)) {
            return this.expandCharacterClass(expression);
        }
        else if (Guards.isDisjunction(expression)) {
            return this.expandDisjunction(expression);
        }
        else if (Guards.isGroup(expression)) {
            return this.expandGroup(expression);
        }
        else if (Guards.isRepetition(expression)) {
            return this.expandRepetition(expression);
        }
        /* istanbul ignore next */
        return assertNever(expression);
    };
    return Expander;
}());
exports["default"] = Expander;
//# sourceMappingURL=Expander.js.map
"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.iteratePermutations = exports.iterateWeightedByCount = void 0;
var number_random_1 = __importDefault(require("../sorts/number-random"));
var weighted_random_1 = __importDefault(require("../sorts/weighted-random"));
/**
 * Return all strings from a set of expansions.  Randomize the order of the returned strings.
 * For example, the patterns /[ab]/ and /[12]/ might return ['b', '1', '2', 'a'].
 * @param options The expansions to choose from
 * @return An iterator that yields the randomly chosen strings
 */
function iterateWeightedByCount(options) {
    var iterators, weights, iRandom, _a, done, value;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                iterators = options.map(function (option) { return option.getIterator(); });
                weights = options.map(function (option) { return option.count; });
                _b.label = 1;
            case 1:
                if (!(iterators.length > 0)) return [3 /*break*/, 5];
                iRandom = weighted_random_1["default"](weights);
                _a = iterators[iRandom].next(), done = _a.done, value = _a.value;
                if (!done) return [3 /*break*/, 2];
                // We've exhausted expansions for this iterator.
                // Remove it from the list of options.
                iterators.splice(iRandom, 1);
                weights.splice(iRandom, 1);
                return [3 /*break*/, 4];
            case 2: return [4 /*yield*/, value];
            case 3:
                _b.sent();
                // Update weight to reflect the remaining count.
                weights[iRandom]--;
                _b.label = 4;
            case 4: return [3 /*break*/, 1];
            case 5: return [2 /*return*/];
        }
    });
}
exports.iterateWeightedByCount = iterateWeightedByCount;
/**
 * Return strings for all permutations of a set of expansions.  Randomize the order of the
 * returned strings.
 * For example, the patterns /[ab]/ and /[12]/ might return ['a2', 'b1', 'a1', 'b2'].
 * @param expansions The expansions to combine in each permutation
 * @return An iterator that yields the permutations, ordered randomly
 */
// eslint-disable-next-line consistent-return
function iteratePermutations(expansions) {
    // Yield all permutations of one value from the current iterator with
    // all values from the child expansions.
    function iterateChildPermutations() {
        var _a, done, thisValue, childIterator, childIterator_1, childIterator_1_1, childValue, e_1_1;
        var e_1, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = thisIterator.next(), done = _a.done, thisValue = _a.value;
                    if (done) {
                        return [2 /*return*/];
                    }
                    childIterator = iteratePermutations(childExpansions);
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 6, 7, 8]);
                    childIterator_1 = __values(childIterator), childIterator_1_1 = childIterator_1.next();
                    _c.label = 2;
                case 2:
                    if (!!childIterator_1_1.done) return [3 /*break*/, 5];
                    childValue = childIterator_1_1.value;
                    return [4 /*yield*/, "" + thisValue + childValue];
                case 3:
                    _c.sent();
                    _c.label = 4;
                case 4:
                    childIterator_1_1 = childIterator_1.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _c.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (childIterator_1_1 && !childIterator_1_1.done && (_b = childIterator_1["return"])) _b.call(childIterator_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8:
                    numCompletedValuesThisIterator++;
                    return [2 /*return*/];
            }
        });
    }
    var _a, thisExpansion, childExpansions, thisIterator, numCompletedValuesThisIterator, inProgressIterators, iRandom, _b, done, value;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = __read(expansions), thisExpansion = _a[0], childExpansions = _a.slice(1);
                thisIterator = thisExpansion.getIterator();
                numCompletedValuesThisIterator = 0;
                if (!(expansions.length <= 1)) return [3 /*break*/, 2];
                return [5 /*yield**/, __values(thisIterator)];
            case 1: 
            // Reached the end of the recursion, yield all iterations
            // of the final expansion.
            return [2 /*return*/, _c.sent()];
            case 2:
                inProgressIterators = [];
                _c.label = 3;
            case 3:
                if (!(numCompletedValuesThisIterator < thisExpansion.count)) return [3 /*break*/, 7];
                iRandom = number_random_1["default"](0, thisExpansion.count - 1);
                if (iRandom > inProgressIterators.length - 1) {
                    inProgressIterators.push(iterateChildPermutations());
                    iRandom = inProgressIterators.length - 1;
                }
                _b = inProgressIterators[iRandom].next(), done = _b.done, value = _b.value;
                if (!done) return [3 /*break*/, 4];
                // We've exhausted permutations for this value of the current iterator.
                inProgressIterators.splice(iRandom, 1);
                return [3 /*break*/, 6];
            case 4: return [4 /*yield*/, value];
            case 5:
                _c.sent();
                _c.label = 6;
            case 6: return [3 /*break*/, 3];
            case 7: return [2 /*return*/];
        }
    });
}
exports.iteratePermutations = iteratePermutations;
//# sourceMappingURL=iterate-sorted.js.map
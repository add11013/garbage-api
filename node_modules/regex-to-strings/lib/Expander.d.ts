import { Expression } from 'regexp-tree/ast';
import Expansion from './Expansion';
import { expandAlternative } from './expanders/alternative-pattern';
import { expandChar } from './expanders/char-pattern';
import { expandCharacterClass } from './expanders/character-class-pattern';
import { expandDisjunction } from './expanders/disjunction-pattern';
import { expandBackreference, expandGroup } from './expanders/group-pattern';
import { expandRepetition } from './expanders/repetition-pattern';
declare class Expander {
    protected readonly expandAlternative: typeof expandAlternative;
    protected readonly expandBackreference: typeof expandBackreference;
    protected readonly expandChar: typeof expandChar;
    protected readonly expandCharacterClass: typeof expandCharacterClass;
    protected readonly expandDisjunction: typeof expandDisjunction;
    protected readonly expandGroup: typeof expandGroup;
    protected readonly expandRepetition: typeof expandRepetition;
    protected readonly flags: string;
    /**
     * Create a generator for strings that match regular expression
     * patterns parsed by regexp-tree.
     * @param flags The regular expression modifier flags
     */
    constructor(flags: string);
    /**
     * Identify and expand an expression of any type.
     * @param expression The expression to expand
     * @returns The Expansion of pattern
     */
    expandExpression(this: Expander, expression: Expression | null): Expansion;
}
export default Expander;

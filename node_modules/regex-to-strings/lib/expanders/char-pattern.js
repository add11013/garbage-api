"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.expandChar = void 0;
var Expansion_1 = __importDefault(require("../Expansion"));
var fisher_yates_random_1 = __importDefault(require("../sorts/fisher-yates-random"));
var Guards = __importStar(require("../types/regexp-tree-guards"));
var alphaOffsetCharCode = 'a'.charCodeAt(0) - 1;
/* istanbul ignore next */
function assertNever(x) {
    throw new Error("Unexpected char type: " + x);
}
function expandCharByCodePoint(codePoint, flags) {
    var char = String.fromCodePoint(codePoint);
    var expanded = flags.includes('i') && char.toUpperCase() !== char.toLowerCase()
        ? [char.toLowerCase(), char.toUpperCase()]
        : [char];
    var sortChars = function () { return fisher_yates_random_1["default"](expanded); };
    return new Expansion_1["default"](sortChars, expanded.length);
}
/**
 * Translate an escaped control character like \cJ to the literal character
 * it matches (e.g. line feed).
 * @param escapedControlChar The escaped control character to convert
 * @return The Expansion of the literal equivalent of the control character
 */
function translateEscapedControlChar(escapedControlChar) {
    // Get the last character of the sequence, e.g. "J"
    var controlChar = escapedControlChar.value.substr(-1);
    // Normalize the character to lowercase, since control characters are
    // case-insensitive, then convert to its decimal value.
    var controlCharCodeLower = controlChar.toLowerCase().charCodeAt(0);
    // Shift the decimal value from the alphanumeric range to the control range.
    var controlCharCodeTranslated = controlCharCodeLower - alphaOffsetCharCode;
    // Convert the shifted decimal char code to a literal character.
    var controlCharString = String.fromCharCode(controlCharCodeTranslated);
    return new Expansion_1["default"]([controlCharString], 1);
}
/**
 * Expand an expression which represents a single character in a
 * variety of formats like "a", "\141", "\x61", and "\u0061".
 * @param node The Char expression to expand
 * @return The Expansion of node
 */
function expandChar(node) {
    var flags = this.flags;
    if (Guards.isSimpleChar(node)) {
        return expandCharByCodePoint(node.codePoint, flags);
    }
    else if (['oct', 'hex', 'unicode'].includes(node.kind)) {
        return expandCharByCodePoint(node.codePoint, flags);
    }
    else if (node.kind === 'control') {
        return translateEscapedControlChar(node);
    }
    else if (node.kind === 'decimal') {
        /* istanbul ignore next */
        var m = "\"" + node.value + "\" not removed by decimalCharToOctalCharTransform";
        throw new Error(m);
    }
    else if (Number.isInteger(node.codePoint)) {
        return expandCharByCodePoint(node.codePoint, flags);
    }
    else if (Guards.isMetaChar(node)) {
        /* istanbul ignore next */
        throw new Error("\"" + node.value + "\" not removed by metaToCharClassTransform");
    }
    /* istanbul ignore next */
    return assertNever(node);
}
exports.expandChar = expandChar;
//# sourceMappingURL=char-pattern.js.map
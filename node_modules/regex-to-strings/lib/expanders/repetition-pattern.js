"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.expandRepetition = void 0;
var Expansion_1 = __importDefault(require("../Expansion"));
var Guards = __importStar(require("../types/regexp-tree-guards"));
var iterate_sorted_1 = require("../helpers/iterate-sorted");
var utils_1 = require("../helpers/utils");
/* istanbul ignore next */
function assertNever(x) {
    throw new Error("Unexpected quantifier: " + x);
}
function getNumOccurrences(quantifier) {
    /* istanbul ignore next */
    if (Guards.isSimpleQuantifier(quantifier)) {
        var transformer = 'simpleQuantifierToRangeQuantifierTransform';
        throw new Error("\"" + quantifier.kind + "\" not removed by " + transformer);
    }
    else if (!Guards.isRangeQuantifier(quantifier)) {
        assertNever(quantifier);
    }
    var from = quantifier.from, to = quantifier.to;
    // Cap unbounded quantifiers like * and +.
    // Otherwise there would be infinite expansions.
    return [from, to !== undefined ? to : 100];
}
/**
 * Expand an expression that repeats another expression, like "a{1,5}"
 * and "(\d|[a-m]){3,}".
 * @param node The Repetition expression to expand
 * @return The Expansion of node
 */
function expandRepetition(node) {
    var _a = __read(getNumOccurrences(node.quantifier), 2), minOccurrences = _a[0], maxOccurrences = _a[1];
    var numOccurrenceOptions = utils_1.fill(minOccurrences, maxOccurrences);
    var expansionOnce = this.expandExpression(node.expression);
    // Calculate the expansions for each quantity of repetition, like "a{1}",
    // "a{2}", "a{3}", etc.
    var allExpansions = numOccurrenceOptions.map(function (numOccurrences) {
        if (numOccurrences <= 0) {
            return Expansion_1["default"].Blank;
        }
        var expansionNTimes = new Array(numOccurrences).fill(expansionOnce);
        var numPermutationsThisNumOccurrences = Math.pow(expansionOnce.count, numOccurrences);
        return new Expansion_1["default"](function () { return iterate_sorted_1.iteratePermutations(expansionNTimes); }, numPermutationsThisNumOccurrences);
    });
    var totalNumPermutations = allExpansions.reduce(function (sum, _a) {
        var count = _a.count;
        return sum + count;
    }, 0);
    // Return all of the expansions for all quantities of repetition.
    return new Expansion_1["default"](function () { return iterate_sorted_1.iterateWeightedByCount(allExpansions); }, totalNumPermutations);
}
exports.expandRepetition = expandRepetition;
//# sourceMappingURL=repetition-pattern.js.map
"use strict";

exports.__esModule = true;
exports.default = codeSamplesTemplate;

var _litElement = require("lit-element");

var _unsafeHtml = require("lit-html/directives/unsafe-html");

var _prismjs = _interopRequireDefault(require("prismjs"));

var _commonUtils = require("../utils/common-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable indent */
function codeSamplesTemplate(xCodeSamples) {
  return (0, _litElement.html)` <section class="table-title top-gap"> CODE SAMPLES  <div class="tab-panel col" @click="${e => {
    if (!e.target.classList.contains('tab-btn')) {
      return;
    }

    const clickedTab = e.target.dataset.tab;
    const tabButtons = [...e.currentTarget.querySelectorAll('.tab-btn')];
    const tabContents = [...e.currentTarget.querySelectorAll('.tab-content')];
    tabButtons.forEach(tabBtnEl => tabBtnEl.classList[tabBtnEl.dataset.tab === clickedTab ? 'add' : 'remove']('active'));
    tabContents.forEach(tabBodyEl => {
      tabBodyEl.style.display = tabBodyEl.dataset.tab === clickedTab ? 'block' : 'none';
    });
  }}"> <div class="tab-buttons row" style="width:100"> ${xCodeSamples.map((v, i) => (0, _litElement.html)`<button class="tab-btn ${i === 0 ? 'active' : ''}" data-tab="${v.lang}${i}"> ${v.label || v.lang} </button>`)} </div> ${xCodeSamples.map((v, i) => (0, _litElement.html)` <div class="tab-content m-markdown code-sample-wrapper" style="display:${i === 0 ? 'block' : 'none'}" data-tab="${v.lang}${i}"> <button class="toolbar-copy-btn" @click="${e => {
    (0, _commonUtils.copyToClipboard)(v.source, e);
  }}">Copy</button> <pre>
          <code>${_prismjs.default.languages[v.lang && v.lang.toLowerCase()] ? (0, _unsafeHtml.unsafeHTML)(_prismjs.default.highlight(v.source, _prismjs.default.languages[v.lang && v.lang.toLowerCase()], v.lang && v.lang.toLowerCase())) : v.source}</code>
        </pre> </div>`)} </div></section>`;
}
/* eslint-enable indent */
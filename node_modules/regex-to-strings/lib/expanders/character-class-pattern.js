"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.expandCharacterClass = void 0;
var constants_1 = require("../constants");
var Expansion_1 = __importDefault(require("../Expansion"));
var fisher_yates_random_1 = __importDefault(require("../sorts/fisher-yates-random"));
var Guards = __importStar(require("../types/regexp-tree-guards"));
var utils_1 = require("../helpers/utils");
function getReferencedCodePoints(expression) {
    // A ClassRange encompasses a range of code points
    if (Guards.isClassRange(expression)) {
        var minCodePoint = expression.from.codePoint;
        var maxCodePoint = expression.to.codePoint;
        return utils_1.fill(minCodePoint, maxCodePoint);
    }
    return [expression.codePoint];
}
var allCodePointOptions = constants_1.Chars.all.map(function (char) { return char.charCodeAt(0); });
/**
 * Expand an expression which represents a single character from a
 * whitelist of options like "[abc]" and "[a-z1-5]", or a blacklist
 * of options like "[^123]" and "[^A-FW-Z]".
 * @param node The CharacterClass expression to expand
 * @return The Expansion of node
 */
function expandCharacterClass(node) {
    var _this = this;
    var applyCaseInsensitiveFlag = function (accumulator, char) {
        if (_this.flags.includes('i') && char.toLowerCase() !== char.toUpperCase()) {
            return accumulator.concat([char.toLowerCase(), char.toUpperCase()]);
        }
        return accumulator.concat(char);
    };
    var referencedCodePoints = node.expressions.reduce(function (accumulator, expression) {
        var codePoints = getReferencedCodePoints(expression);
        return accumulator.concat(codePoints);
    }, []);
    var expandedClass = allCodePointOptions
        // For a whitelist set, discard code points not referenced in the set
        .filter(function (opt) { return !node.negative || !referencedCodePoints.includes(opt); })
        // For a blacklist set, discard code points referenced in the set
        .filter(function (opt) { return node.negative || referencedCodePoints.includes(opt); })
        .map(function (codePoint) { return String.fromCodePoint(codePoint); })
        .reduce(applyCaseInsensitiveFlag, []);
    var sortChars = function () { return fisher_yates_random_1["default"](expandedClass); };
    return new Expansion_1["default"](sortChars, expandedClass.length);
}
exports.expandCharacterClass = expandCharacterClass;
//# sourceMappingURL=character-class-pattern.js.map
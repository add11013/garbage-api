"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.expandAlternative = void 0;
var Expansion_1 = __importDefault(require("../Expansion"));
var iterate_sorted_1 = require("../helpers/iterate-sorted");
function traverseTree(tree) {
    if (!tree.length) {
        return Expansion_1["default"].Empty;
    }
    /**
     * Recursively expand all expressions in the alternative. Then
     * combine all the permutations of the expansions. This is
     * necessary to expand deep, complex expressions like [12](3+|\d)
     */
    var firstBranch = this.expandExpression(tree[0]);
    var restOfTree = traverseTree.call(this, tree.slice(1));
    if (restOfTree.count <= 0) {
        return firstBranch;
    }
    var iterator = function () { return iterate_sorted_1.iteratePermutations([firstBranch, restOfTree]); };
    var numPermutations = firstBranch.count * restOfTree.count;
    return new Expansion_1["default"](iterator, numPermutations);
}
/**
 * Expand an expression that itself is a series of expressions, such as
 * "abc", "a[bc]", "a(b|c)", or "a\d+".
 * @param node The Alternative expression to expand
 * @return The Expansion of node
 */
function expandAlternative(node) {
    return traverseTree.call(this, node.expressions);
}
exports.expandAlternative = expandAlternative;
//# sourceMappingURL=alternative-pattern.js.map
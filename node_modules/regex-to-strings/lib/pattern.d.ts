import Expansion from './Expansion';
/**
 * Calculate how many strings satisfy the regular expression pattern.
 * @param pattern The regular expression to expand
 * @return The total number of strings that satisfy the regular expression
 * @throws When pattern is invalid or unsupported syntax
 */
export declare function count(pattern: string | RegExp): number;
/**
 * Calculate strings that satisfy the regular expression pattern.
 * @param pattern The regular expression to expand
 * @return The Expansion of pattern
 * @throws When pattern is invalid or unsupported syntax
 */
export declare function expand(pattern: string | RegExp): Expansion;
/**
 * Calculate up to N strings that satisfy the regular expression pattern.
 * Return all strings or N strings, whichever is fewer.
 * @param pattern The regular expression to expand
 * @param maxExpansions The maximum number of expansions to return
 * @return A list of up to maxExpansions strings matched by pattern
 * @throws When pattern is invalid or unsupported syntax
 */
export declare function expandN(pattern: string | RegExp, maxExpansions: number): string[];
/**
 * Calculate all strings that satisfy the regular expression pattern.
 * @param pattern The regular expression to expand
 * @return A list of strings matched by pattern
 * @throws When pattern is invalid or unsupported syntax
 */
export declare function expandAll(pattern: string | RegExp): string[];
/**
 * Normalize a regular expression pattern to a format that regexp-tree can parse.
 * Distinguish RegEx-like strings (e.g. "/abc/i") from plain strings (e.g. "abc").
 * @param pattern The unnormalized regular expression pattern
 * @returns pattern as a RegExp or RegEx-like string
 */
export declare function toRegExp(pattern: string | RegExp): string | RegExp;
